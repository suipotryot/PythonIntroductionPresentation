POSERO>> let b:posero_push_all = 0

██████╗ ██╗   ██╗████████╗██╗  ██╗ ██████╗ ███╗   ██╗    ██████╗
██╔══██╗╚██╗ ██╔╝╚══██╔══╝██║  ██║██╔═══██╗████╗  ██║    ╚════██╗
██████╔╝ ╚████╔╝    ██║   ███████║██║   ██║██╔██╗ ██║     █████╔╝
██╔═══╝   ╚██╔╝     ██║   ██╔══██║██║   ██║██║╚██╗██║     ╚═══██╗
██║        ██║      ██║   ██║  ██║╚██████╔╝██║ ╚████║    ██████╔╝
╚═╝        ╚═╝      ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝    ╚═════╝
                                                           by Gus

Subjects:
    Python basics
    Phylosophy
    Tools
    REST

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^\$ '
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "shell"

██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     
██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     
██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     
██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     
██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗
╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝

$ python --version
Python 3.6.4

$ python2.7 --version
Python 2.7.10

$ python3 --version
Python 3.6.4

Mac:
$ brew install python3

Linux:
$ apt-get install python3

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^\$ |\v^\(python'
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "shell"

██████╗ ██╗██████╗        ██╗       ██╗   ██╗██╗██████╗ ████████╗██╗   ██╗ █████╗ ██╗     ███████╗███╗   ██╗██╗   ██╗
██╔══██╗██║██╔══██╗       ██║       ██║   ██║██║██╔══██╗╚══██╔══╝██║   ██║██╔══██╗██║     ██╔════╝████╗  ██║██║   ██║
██████╔╝██║██████╔╝    ████████╗    ██║   ██║██║██████╔╝   ██║   ██║   ██║███████║██║     █████╗  ██╔██╗ ██║██║   ██║
██╔═══╝ ██║██╔═══╝     ██╔═██╔═╝    ╚██╗ ██╔╝██║██╔══██╗   ██║   ██║   ██║██╔══██║██║     ██╔══╝  ██║╚██╗██║╚██╗ ██╔╝
██║     ██║██║         ██████║       ╚████╔╝ ██║██║  ██║   ██║   ╚██████╔╝██║  ██║███████╗███████╗██║ ╚████║ ╚████╔╝ 
╚═╝     ╚═╝╚═╝         ╚═════╝        ╚═══╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═══╝  ╚═══╝  

Mac: already with python

Linux: 
$ apt-get install python3-pip

$ pip freeze
appnope==0.1.0
bleach==2.1.2
[...]
webencodings==0.5.1
widgetsnbextension==3.1.3

$ sudo pip install virtualenv
Requirement already satisfied: virtualenv in /usr/local/lib/python3.6/site-packages

$ virtualenv python_demo
Using base prefix '/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6'
New python executable in /Users/guillaume/norauto/python_demo/python_demo/bin/python3.6
Also creating executable in /Users/guillaume/norauto/python_demo/python_demo/bin/python
Installing setuptools, pip, wheel...done.

$ source python_demo/bin/activate

(python_demo) $ pip freeze

(python_demo) $ pip install flask
Collecting flask
  Downloading Flask-0.12.2-py2.py3-none-any.whl (83kB)
    100% |████████████████████████████████| 92kB 1.0MB/s
Collecting Jinja2>=2.4 (from flask)
  Using cached Jinja2-2.10-py2.py3-none-any.whl
Collecting click>=2.0 (from flask)
  Downloading click-6.7-py2.py3-none-any.whl (71kB)
    100% |████████████████████████████████| 71kB 1.5MB/s
Collecting itsdangerous>=0.21 (from flask)
  Downloading itsdangerous-0.24.tar.gz (46kB)
    100% |████████████████████████████████| 51kB 1.5MB/s
Collecting Werkzeug>=0.7 (from flask)
  Downloading Werkzeug-0.14.1-py2.py3-none-any.whl (322kB)
    100% |████████████████████████████████| 327kB 1.2MB/s
Collecting MarkupSafe>=0.23 (from Jinja2>=2.4->flask)
Building wheels for collected packages: itsdangerous
  Running setup.py bdist_wheel for itsdangerous ... done
  Stored in directory: /Users/guillaume/Library/Caches/pip/wheels/fc/a8/66/24d655233c757e178d45dea2de22a04c6d92766abfb741129a
Successfully built itsdangerous
Installing collected packages: MarkupSafe, Jinja2, click, itsdangerous, Werkzeug, flask
Successfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.14.1 click-6.7 flask-0.12.2 itsdangerous-0.24

(python_demo) $ pip freeze
click==6.7
Flask==0.12.2
itsdangerous==0.24
Jinja2==2.10
MarkupSafe==1.0
Werkzeug==0.14.1

(python_demo) $ python --version
Python 3.6.4

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^\$ |\v^\(python'
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "ipython"

(python_demo) $ pip freeze > requirements.txt

(python_demo) $ deactivate

$ cd ../my_other_project

$ source other_venv/bin/activate

(other_venv) $ pip install -r requirements.txt
[...]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^In [|\v^   ...|\v^>'
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "ipython"

███████╗███████╗███╗   ██╗
╚══███╔╝██╔════╝████╗  ██║
  ███╔╝ █████╗  ██╔██╗ ██║
 ███╔╝  ██╔══╝  ██║╚██╗██║
███████╗███████╗██║ ╚████║
╚══════╝╚══════╝╚═╝  ╚═══╝


> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
[...]
In the face of ambiguity, refuse the temptation to guess.
[...]
If the implementation is hard to explain, it s a bad idea.
[...]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^In '
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "ipython"

"Readability counts." => Block == Indent

In [1]: if 42 > 12:
   ...:     print("Beware of the groove !")

Beware of the groove !

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^In '
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "ipython"

"Simple is better than complex."

In [0]: import keyword

In [1]: print(keyword.kwlist)
Out[1]: ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

In [2]: len(keyword.kwlist)
Out[2]: 33

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^>'
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "ipython"

"Duck typing"

> a = "hello"

> b = " futur python addict"

> a + b
'hello futur python addict'

> c = 18

> a + c
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-6-e81e582b6fa9> in <module>()
----> 1 a + c

TypeError: must be str, not int

> a * c
'hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello'

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^>'
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "python"

 ██████╗ ███████╗████████╗    ██████╗  █████╗ ████████╗ █████╗ 
██╔════╝ ██╔════╝╚══██╔══╝    ██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗
██║  ███╗█████╗     ██║       ██║  ██║███████║   ██║   ███████║
██║   ██║██╔══╝     ██║       ██║  ██║██╔══██║   ██║   ██╔══██║
╚██████╔╝███████╗   ██║       ██████╔╝██║  ██║   ██║   ██║  ██║
 ╚═════╝ ╚══════╝   ╚═╝       ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝

$ ipython

> data_file = open("electrical_consumption.data", "r")

> data_file.read()
| Appareil électrique                             | Puissance en Watts | Période d’utilisation | Fréquence d’utilisation | Consommation annuelle moyenne |
| Frigo combi (250 litres), label A+              | 150 à 200 W        | 365 jours             | En continu              | 201 kWh *                     |
| Frigo combi (250 litres), label C               | 200 à 350 W        | 365 jours             | En continu              | 500 kWh                       |
| Conditionnement d'air                           | 2600 à 4000 W      | 60 jours              | 5h/jour                 | 960 kWh                       |
| TV tube cathodique en service                   | 80 à 100 W         | 335 jours             | 4h/jour                 | 121 kWh                       |
[...]

> data_file.close()

> with open("electrical_consumption.data", "r") as data_file:
>    data_raw = data_file.read()
>    for row in data:
>        print(row)

[...] // All characters of our string

> with open("electrical_consumption.data", "r") as data_file:
>     data_raw = data_file.read()
>     for row in data_raw.split("\n"):
>         row.split("|")

['', ' Appareil électrique                            ', 'Puissance en Watts', 'Période d’utilisation', 'Fréquence d’utilisation', 'Consommation annuelle moyenne ', '']
['', ' Frigo combi (250 litres), label A+             ', '150 à 200 W       ', '365 jours            ', 'En continu             ', '201 kWh *                     ', '']
['', ' Frigo combi (250 litres), label C              ', '200 à 350 W       ', '365 jours            ', 'En continu             ', '500 kWh                       ', '']
['', ' Conditionnement d'air                          ', '2600 à 4000 W     ', '60 jours             ', '5h/jour                ', '960 kWh                       ', '']

> with open("electrical_consumption.data", "r") as data_file:
>     data_raw = data_file.read()
>     for row in data_raw.split("\n"):
>         cells = row.split("|")
>         for cell in cells:
>             cell.strip()

Appareil électrique
Puissance en Watts
Période d’utilisation
[...]

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^In |\v^   ...|\v^"'
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "ipython"

██╗     ██╗███████╗████████╗
██║     ██║██╔════╝╚══██╔══╝
██║     ██║███████╗   ██║   
██║     ██║╚════██║   ██║   
███████╗██║███████║   ██║   
╚══════╝╚═╝╚══════╝   ╚═╝   

> with open("electrical_consumption.data", "r") as data_file:
>     data_raw = data_file.read()
>     for row in data_raw.split("\n"):
>         cells = row.split("|")
>         [cell.strip() for cell in cells]

['', 'Appareil électrique', 'Puissance en Watts', 'Période d’utilisation', 'Fréquence d’utilisation', 'Consommation annuelle moyenne', '']
['', 'Frigo combi (250 litres), label A+', '150 à 200 W', '365 jours', 'En continu', '201 kWh *', '']
['', 'Frigo combi (250 litres), label C', '200 à 350 W', '365 jours', 'En continu', '500 kWh', '']
[...]

>         [cell.strip() for cell in cells if cell != '']

['Appareil électrique', 'Puissance en Watts', 'Période d’utilisation', 'Fréquence d’utilisation', 'Consommation annuelle moyenne']
['Frigo combi (250 litres), label A+', '150 à 200 W', '365 jours', 'En continu', '201 kWh *']
['Frigo combi (250 litres), label C', '200 à 350 W', '365 jours', 'En continu', '500 kWh']
[...]


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^#'
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "python"

# electrical_consumption.py
> def fetch_data():
>     data = []
>     with open("electrical_consumption.data", "r") as data_file:
>         data_raw = data_file.read()
>         for row in data_raw.split("\n"):
>             cells = row.split("|")
>             data.append([cell.strip() for cell in cells if cell != ''])
>     return data 
> 
> fetch_data()

# electrical_consumption.py
> def fetch_data():
>     data = []
>     with open("electrical_consumption.data", "r") as data_file:
>         data_raw = data_file.read()
>         for row in data_raw.split("\n"):
>             cells = row.split("|")
>             data.append([cell.strip() for cell in cells if cell != ''])
>     return data 
> 
> if __name__ == "__main__":
>     fetch_data()

# electrical_consumption.py
> class DataHandler:
> 
>     data = []
> 
>     def fetch_data(self):
>         DataHandler.data = []
>         with open("electrical_consumption.data", "r") as data_file:
>             data_raw = data_file.read()
>             for row in data_raw.split("\n"):
>                 cells = row.split("|")
>                 DataHandler.data.append([cell.strip() for cell in cells if cell != ''])
> 
> if __name__ == "__main__":
>     data_handler = DataHandler()
>     data_handler.fetch_data()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^>'
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "ipython"

 ██╗
██╔╝
██║ 
██║ 
╚██╗
 ╚═╝

"Explicit is better than implicit."

> class ErrorClass:
>     def __init__(val):
>         this.val = val


> an_instance = ErrorClass(18)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-2-9ea0a5a4e12d> in <module>()
----> 1 an_instance = ErrorClass(18)

TypeError: __init__() takes 1 positional argument but 2 were given

> class MyClass:
>     def __init__(self, value):
>         self.value = value

> a = MyClass(12)

> b = MyClass(14)

> a.value
12

> b.value
14

> c = MyClass(18)

> MyClass.__init__(c, 36)

> c.value
36

██╗ 
╚██╗
 ██║
 ██║
██╔╝
╚═╝ 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^   '
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "python"

 █████╗ ██████╗ ██╗
██╔══██╗██╔══██╗██║
███████║██████╔╝██║
██╔══██║██╔═══╝ ██║
██║  ██║██║     ██║
╚═╝  ╚═╝╚═╝     ╚═╝


    from flask import Flask
    app = Flask(__name__)
    
    @app.route('/')
    def home():
        return "The Shire"

>>> http://127.0.0.1:5000
    
    from DataHandler import DataHandler
    from flask import jsonify
    
    data_handler = DataHandler()
    data_handler.fetch_data()
    
    @app.route('/consumption/')
    def consumption():
        name_list = [row[0] for row in data_handler.data if len(row) > 0]
        return jsonify(name_list)

>>> http://127.0.0.1:5000/consumption/cafetière/


    @app.route('/calculate/<tool_name>/')
    def calculate_consumption_of(tool_name):
        name_list = [row[0] for row in data_handler.data if len(row) > 0]
        if not tool_name in name_list:
            return "It's a 404 boy", 404
        found_row = data_handler.data[name_list.index(tool_name)]
        min_con, max_con = found_row[1:3]
        average = (int(min_con) + int(max_con)) / 2
        return jsonify(average * int(request.args.get('qtity')) * int(request.args.get('time')))

http://127.0.0.1:5000/calculate/Ordinateur%20avec%20%C3%A9cran%20plat/?qtity=45&time=1

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_fake_type = '\v^\d'
POSERO>> let b:posero_push_on_non_fake = 1
POSERO>> let b:posero_syntax = "ipython"

 ██╗ ██████╗     ██████╗ ███████╗ █████╗ ███████╗ ██████╗ ███╗   ██╗███████╗
███║██╔═████╗    ██╔══██╗██╔════╝██╔══██╗██╔════╝██╔═══██╗████╗  ██║██╔════╝
╚██║██║██╔██║    ██████╔╝█████╗  ███████║███████╗██║   ██║██╔██╗ ██║███████╗
 ██║████╔╝██║    ██╔══██╗██╔══╝  ██╔══██║╚════██║██║   ██║██║╚██╗██║╚════██║
 ██║╚██████╔╝    ██║  ██║███████╗██║  ██║███████║╚██████╔╝██║ ╚████║███████║
 ╚═╝ ╚═════╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝
                                                              to love Python

1 > Python is installed by default almost everywhere.
2 > Python does not need IDE.
3 > Python is there since 1990 and for a while.
4 > Python is batteries included.
5 > Python is fair play.
6 > Python forces readability.
7 > Python make us save time.
8 > Python has a lot of (good) doc.
9 > Python is hackable.
10 > Python makes me happy.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_push_all = 0

 ██████╗ ██╗   ██╗███████╗███████╗████████╗██╗ ██████╗ ███╗   ██╗ ██╗███████╗██╗ 
██╔═══██╗██║   ██║██╔════╝██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║██╔╝██╔════╝╚██╗
██║   ██║██║   ██║█████╗  ███████╗   ██║   ██║██║   ██║██╔██╗ ██║██║ ███████╗ ██║
██║▄▄ ██║██║   ██║██╔══╝  ╚════██║   ██║   ██║██║   ██║██║╚██╗██║██║ ╚════██║ ██║
╚██████╔╝╚██████╔╝███████╗███████║   ██║   ██║╚██████╔╝██║ ╚████║╚██╗███████║██╔╝
 ╚══▀▀═╝  ╚═════╝ ╚══════╝╚══════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═╝╚══════╝╚═╝ 

                                                                PYTHON (3) by GUS
                                                                with VIM & POSERO
